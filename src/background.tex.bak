\section{Background}
\label{sec:back}

\subsection{Aplicaciones Android}
En esencia una aplicación Android es una aplicación Java con interfaces
descritas en sintasis XML, cuya ejecución es activada por el framework la API
Android.\newline 
El framework de Aplicación Android ofrece diferentes funcionalidades de
operación del sistema, proporcionando información de los servicios ofrecidos por
el telefóno. Por ejemplo, provee información de la ubicación del
usuario.\newline 
Así pues, una aplicación Android obtiene del framework, clases e interfaces
necesarias para implementar sus funcionalidades.

Por otro lado, el SDK, Android Software Development Toolkit, permite compilar
la aplicación a una versión ejecutable por dispositivos Android, esto es, código
Dalvik bytecode(.dex). Adicionalmente, el SDK genera el APK, Android Application
Package, donde empaqueta todo el código de la aplicación, incluyendo el
bytecode. El APK es un archivo con extención .apk, y es el que finalmente se
instala en el dispositivo para obtener las funcionalidades de la aplicación.

En lo que respecta a su estructura, 
una aplicación Android puede integrarse por uno o más de los siguientes
componentes: Activities, Services, Content Providers y Broadcast Receivers.\\
Las actividades representan acciones a ejecutar por el usuario, permiten que el
usuario se comunique con la aplicación.\\
Los servicios son componentes de aplicación que ejecutan tareas en background.\\
Los proveedores de contenido son componentes que permiten compartir datos entre
diferentes aplicaciones Android.\\
Los componentes Broadcast Receives reciben mensajes envíados por el sistema o
por otras aplicaciones.

Los componentes que integran una aplicación son especificados en el archivo
manifiesto de la aplicación Manifest.xml\cite{App-Manifest}, donde
adicionalmente se declaran: tanto los permisos requeridos por la aplicación para
acceder a partes protejidas de la API\cite{Android-Permissions} e intereactuar
con otras aplicaciones; como los permisos requeridos por aplicaciones
externas para interactuar con los componentes de la aplicación.

La comunicación entre varias aplicaciones Android(Comunicación interApp), tiene
lugar a través de intents\cite{App-Intent}, métodos proveídos por la API Android
para la activación de componentes tanto al interior de la aplicación como entre
aplicaciones externas.

\subsection{Sistema de anotaciones en Jif}
Jif es un lenguaje tipado de seguridad que extiende al lenguaje Java con labels
de seguridad, a través de los cuales se especifican restricciones de cómo
debería ser utilizada la información. Jif está compuesto por un compilador y un
sistema de anotaciones.\newline
% El sistema de anotaciones está basado en un modelo de etiquetas
% DLM(Decentralized Label Model), donde existen principales, políticas y
% labels.\newline
El análisis de flujo de información de aplicativos Java mediante Jif, requiere
su implementación haciendo uso del sistema de anotaciones de Jif, de modo que se
especifiquen las políticas de seguridad a evaluar.
Tal implementación se basa en adicionar labels de seguridad a la definición
de métodos, variables, arrays, etc; los labels de seguridad no especificados son
generados automáticamente con labels por defecto.\newline
%http://www.cs.cornell.edu/jif/doc/jif-3.3.0/language.html#inference.
La verificación del cumplimiento de las políticas de seguridad, tiene lugar
durante la compilación del aplicativo, allí el compilador Jif aplica chequeo de
labels(label checking)\cite{jifRef},  verificando que los flujos de información
generados cumplen con las restricciones establecidas. 

\subsection{DML(Decentralized Label Model)}
Jif basa su sistema de anotaciones en el modelo de etiquetas DLM(Decentralized
Label Model), donde se manejan tres elementos fundamentales: Principals,
Políticas y Labels.\newline
Principals: un principal es una entidad con autoridad para observar y cambiar
aspectos del sistema. Un programa pertenece a un principal, quien determina el
comportamiento que este debería tener. Jif cuenta con una serie de principales ya
definidos, por ejemplo, Alice, Bob, Chunck, etc, que pueden ser
utilizados al momento de anotar.\newline 
Políticas: mediante políticas de seguridad el dueño de la política, que es el
principal que la define, determina qué otros principales pueden leer o
influenciar la información. Así, una política puede ser de confidencialidad o de
integridad, y se especifican de la forma: \{owner: reader list\} u
\{owner: writer list\}.\newline 
Labels: un label consiste en un conjunto de políticas de confidencialidad e
integridad. Los labels se escriben en las expresiones del programa que se
anota(labels de seguridad), esto es métodos, variables, arrays, etc..\newline 
En síntesis, las políticas de seguridad definen que principales pueden leer o
modificar la información, y esas políticas se expresan mediante labels.

\subsection{Label Checking}
\label{subsec: pc}
% Jif hace chequeo de labels para verificar si un programa cumple con las
% políticas de seguridad indicadas en sus labels. Las reglas de chequeo se centran
% en verificar si se cumplen las siguiguientes restricciones:\newline
% (1) El label con que aparece cada expresión es por lo menos tan
% restrictivo como el label de cada valor que podría producir.\newline
% (2) El label con que aparece un valor, es por lo menos tan restrictivo como la
% etiqueta de los valores que puedan afectarlo.

Para hacer seguimiento al flujo de información de un programa, el compilador de
Jif asocia un label al program counter de cada punto del programa,
progam-counter label(\underline{pc}). En cada punto del programa, el
(\underline{pc}) representa la información que podría conocerse tras la
ejecución de ese punto del programa.
El (\underline{pc}) es afectado por los labels con que se define cada sentencia
y expresión del programa, por tanto este es considerado como el límite
superior(máxima información que podría conocerse) de los labels que han afectado
el flujo de información para llegar a un determinado punto de ejecución.\newline
Adicionalmente, jif define labels que representan la información que podría
conocerse tras la terminación normal, o terminación por excepción de las
sentencias del programa. Y labels enviroments, que para cada punto del programa
determinan la forma en que se relacionan labels y principales.\newline
El valor de dichos labels es verificado durante la compilación del programa, si
se detecta que no cumplen con las restricciones establecidas en la anotación del
mismo, el compilador genera error, indicando los puntos del programa que las
incumplen.\newline


% \subsubsection{Sintaxis de labels}
% Como se representa leer y escribir

\subsection{Sintaxis de Anotación en Jif}
\label{sssec:JifSintax} 

% \begin{center}
%   \lstset{%
%     caption=Descriptive Caption Text,
%     basicstyle=\ttfamily\footnotesize\bfseries,
%     frame=tb
%   }
%   \begin{lstlisting}
%     printf("this should be centered!");
%   \end{lstlisting}
% \end{center
\subsubsection{Definición de variables}
% -Definición de variables: \newline 
En Java la sintaxis para definir una variable es:

\begin{lstlisting}
	modifier java-type varName
\end{lstlisting}
Extendiendo la sintaxis Java, en Jif las variables se definen de la forma:
\begin{lstlisting}
	modifier java-type {L} varName
\end{lstlisting}
Donde java-type especifica el tipo de dato Java que almacena la variable, \{L\}
el label de seguridad  para especificar quien es el dueño de la variable, y
varName, el respectivo nombre de la variable.

\subsubsection{Definición de arrays}
% -Definición de arrays:\newline
En Java un array se define de la forma:
\begin{lstlisting}
	modifier java-type [ ] nameArray
\end{lstlisting}
% \emph{modifier java-type [ ] nameArray}\\
En Jif, además del tipo de dato Java(java-type) de los elementos almacenados en
el array, se deben especificar dos labels de seguridad: Base Label(BL) y Size
Label(SL). BL indica el nivel de seguridad de los elementos que almacena el
array, controlando quien puede conocer la información del mismo. SL especifica
quienes pueden conocer la número de elementos almacenados. Así, la sintaxis para
anotar el array es:
\begin{lstlisting}
	java-type {BL} [ ]{SL} nameArray
\end{lstlisting}
% \emph{java-type\{BL\} [ ]\{SL\} nameArray}

\subsubsection{Definición de métodos}
En Java la definición de un método tiene la siguiente sintaxis:
\begin{lstlisting}
modifier java-type methodName(java-type arg1,,, java-type argn)
{body method}
\end{lstlisting}
En Jif se debe asociar un label de seguridad al tipo de
dato retornado, los argumentos que recibe y las excepciones declaradas.
Adicionalmente, se declara un begin-label(BL) y un end-label(EL). 
La sintaxis es la siguiente:
\begin{lstlisting}
modifier java-type{RTL} methodName{BL}(java-type arg1{AL},,,
				java-type argn{AL}) :{EL}
\end{lstlisting}
Donde: \emph{java-type}, es el tipo de dato Java retornado por el
método.\newline 
\emph{RTL}, Return Type Label, indica el label de seguridad para el valor
devuelto por el método.\newline 
\emph{BL}, Begin Label, representa el máximo nivel se seguridad del
\underline{pc} desde donde se invoca el método, de este modo,
el program counter label desde donde se invoca el método debe ser menor o igual
de restrictivo que el BL con que se define el método. El BL también asegura que
el método sólo podrá actualizar partes del programa que tengan igual BL. Con
tales restricciones se evita la generación de flujos implícitos, vía invocación
del método.\newline
\emph{AL}, Argument Label, indica el máximo nivel de seguridad para los
argumentos con que se llama el método, así, los labels de los argumentos con que se
invoca el método deben ser menor o igual de restrictivos que el AL con que ha
definido el método.\newline 
\emph{EL}, End Label, indica el \underline{pc} en el punto de terminación del
método, y representa el máximo nivel de información que puede conocerse tras la
finalización del método.

\subsection{Labels de anotación que Jif asume por defecto}
\label{sssec:default-labels}
Cuando en la declaración de variables o métodos no se especifica su respectivo
label de seguridad, Jif lo infiere o genera automáticamente. De acuerdo al tipo
de sentencia. Así:\newline
- Variables locales: Jif infiere sus labels, de modo que se respeten las
restricciones sobre el flujo de información.\newline
- Arrays: por defecto, Jif define el label público para el Base Label(BL) y el
Size Label(SL) de un array.\newline
- Class fields: el label por defecto es \{ \}, que representa información con el
menor nivel de confidencialidad. Es el label menos confiable, con este se
asegura que información altamente confidencial no podrá ser almacenado en el
campo de la clase.\newline
- Métodos: los labels que Jif genera por defecto para la definición de
métodos son:\newline 
Argument Label(AL): el label por defecto es el Top principal, es decir que sólo
la máxima autoridad podrá leer la información del argumento.\newline 
Begin Label(BL): su label por defecto es el Top principal.\newline
End Label(EL): Jif hace un Join de los labels con que se definen las
excepciones del método, si el método no tiene excepciones, el label por defecto
es el menos restrictivo \{ \}\newline
Return Type Label(RTL): Jif hace un Join de los AL y el EL.\newline
Labels para excepciones: el valor del EL.\newline


% \subsubsection{Llamada a métodos}
% En Jif la invocación de métodos se regula por el nivel de seguridad de los
% labels con que se define el método y los labels con que se invoca el
% método(método actual). De este modo: los labels del método actual no deben ser
% más restrictivos que los labels con que se define el método. Así:\newline
% - Los AL del método actual deben ser menor o igual de restrictivos que los AL
% con que se define el método.\\
% - El BL del método actual, no debe ser más restrictivo que el BL con que se ha
% definido el método.\newline


\subsection{Flujos implícitos y \underline{pc}}
Los flujos implícitos son canales creados durante el control de flujo del
programa. Buscando prevenir la fuga de información a través de estos canales,
Jif asocia un \underline{pc} a cada statement y expresión del programa,
representando la información que debería conocerse tras su evaluación.\\
El sistema de tipos de Jif asegura que el \underline{pc} debe ser por
lo menos tan restrictivo como los labels de las variables de que depende el
program counter de la sentencia.\newline
En el siguiente ejemplo se ilustra la generación de flujos implícitos:
\begin{lstlisting}
boolean {Alice:} secreto;
boolean {} publico;
secreto = true;
if( secreto )		
	publico = 0;
else				//Implicit Flow
	publico = 1;
\end{lstlisting}

El flujo implícito tiene lugar en el condicional porque la variable
\emph{publico}, cuyo nivel de seguridad es bajo (\underline{pc}=\{\}) permite
conocer información de la variable \emph{secreto}, con nivel de seguridad alto
(\underline{pc}=\{Alice:\})















